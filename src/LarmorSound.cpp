/*****************************************************************************
 * LarmorSound for FabricEngine v.1.0 Beta 04/11/2016
 * Copyright (c) 2016 Pier Paolo Ciarravano - http://www.larmor.com
 * All rights reserved.
 *
 * This file is part of LarmorSound Fabric Engine Extension.
 *
 * Author: Pier Paolo Ciarravano
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 ****************************************************************************/

//#include <iostream>

#include "LarmorSound.h" // Automatically generated by kl2edk

#include <LarmorSoundAPI/LarmorSoundAPI_Client.h>

using namespace Fabric::EDK;
using namespace Larmor;

IMPLEMENT_FABRIC_EDK_ENTRIES( LarmorSound )

// LarmorSound(String filename) = "LarmorSound_construct";
FABRIC_EXT_EXPORT void LarmorSound_construct(
    KL::Traits<KL::LarmorSound>::IOParam this_,
    KL::Traits<KL::String>::INParam filename
)
{
    Fabric::EDK::log("LarmorSound Fabric Engine Extension v.1.0 Beta 04/11/2016\nAuthor: Pier Paolo \"Larmor\" Ciarravano http://www.larmor.com");
    Fabric::EDK::log("Extension: Enter LarmorSound_construct(String filename)");
    //Fabric::EDK::log(filename);

    // Create Object
    LarmorSound *ls = new LarmorSound(filename.c_str());
    // Initialize pointer
    this_->pointer = ls;

    //Fabric::EDK::log("Extension: Leave LarmorSound_construct()");
}

// ~LarmorSound() = "LarmorSound_destroy";
FABRIC_EXT_EXPORT void LarmorSound_destroy(
    KL::Traits<KL::LarmorSound>::IOParam this_
)
{
    Fabric::EDK::log("Extension: Enter LarmorSound_destroy()");

    delete static_cast<LarmorSound*>(this_->pointer);

    //Fabric::EDK::log("Extension: Leave LarmorSound_destroy()");
}

// UInt32 LarmorSound.getNumSamples() = "LarmorSound_getNumSamples";
FABRIC_EXT_EXPORT KL::UInt32 LarmorSound_getNumSamples(
    KL::Traits<KL::LarmorSound>::INParam this_
)
{
    //Fabric::EDK::log("Extension: Enter LarmorSound_getNumSamples()");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->getNumSamples();

    //Fabric::EDK::log("Extension: Leave LarmorSound_getNumSamples()");
}

// UInt32 LarmorSound.getSamplerate() = "LarmorSound_getSamplerate";
FABRIC_EXT_EXPORT KL::UInt32 LarmorSound_getSamplerate(
    KL::Traits<KL::LarmorSound>::INParam this_
)
{
    //Fabric::EDK::log("Extension: Enter LarmorSound_getSamplerate()");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->getSamplerate();

    //Fabric::EDK::log("Extension: Leave LarmorSound_getSamplerate()");
}

// UInt32 LarmorSound.getNumChannels() = "LarmorSound_getNumChannels";
FABRIC_EXT_EXPORT KL::UInt8 LarmorSound_getNumChannels(
    KL::Traits<KL::LarmorSound>::INParam this_
)
{
    //Fabric::EDK::log("Extension: Enter LarmorSound_getNumChannels()");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->getNumChannels();

    //Fabric::EDK::log("Extension: Leave LarmorSound_getNumChannels()");
}

// Float32<> LarmorSound.getChannelSample(UInt8 numChannel) = "LarmorSound_getChannelSample";
FABRIC_EXT_EXPORT void LarmorSound_getChannelSample(
    KL::Traits< KL::ExternalArray< KL::Float32 > >::Result result,
    KL::Traits<KL::LarmorSound>::INParam this_,
    KL::Traits<KL::UInt8>::INParam numChannel
)
{
    //Fabric::EDK::log("Extension: Enter LarmorSound_getChannelSample(UInt8 numChannel)");
    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    Larmor::vect_smpl *channelSample = ls->getChannelSample(numChannel);
    if(channelSample == NULL) {
        return;
    }
    result = KL::ExternalArray<KL::Float32>((KL::Float32*)&(*channelSample)[0], channelSample->size());
    //std::cout << "Result ExternalArray Size: " << result.size() << std::endl;
    //for(uint32_t i = 0; i < result.size(); i++) {
    //    std::cout << i << " --> " << result[i] << std::endl;
    //}

    //Fabric::EDK::log("Extension: Leave LarmorSound_getChannelSample(UInt8 numChannel)");
}

// Float32<> LarmorSound.getChannelSpectrum(UInt8 numChannel, UInt32 position) = "LarmorSound_getChannelSpectrum";
FABRIC_EXT_EXPORT void LarmorSound_getChannelSpectrum(
    KL::Traits< KL::ExternalArray< KL::Float32 > >::Result result,
    KL::Traits<KL::LarmorSound>::INParam this_,
    KL::Traits<KL::UInt8>::INParam numChannel,
    KL::Traits<KL::UInt32>::INParam position
)
{
    //Fabric::EDK::log("Extension: Enter LarmorSound_getChannelSpectrum(UInt8 numChannel, UInt32 position)");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    Larmor::vect_smpl *spectrum = ls->getChannelSpectrum(numChannel, position);
    if(spectrum == NULL) {
        return;
    }
    result = KL::ExternalArray<KL::Float32>((KL::Float32*)&(*spectrum)[0], spectrum->size());

    //Fabric::EDK::log("Extension: Leave LarmorSound_getChannelSpectrum(UInt8 numChannel, UInt32 position)");
}

// Float32 LarmorSound.getChannelEnergy(UInt8 numChannel, UInt32 position) = "LarmorSound_getChannelEnergy";
FABRIC_EXT_EXPORT KL::Float32 LarmorSound_getChannelEnergy(
    KL::Traits<KL::LarmorSound>::INParam this_,
    KL::Traits<KL::UInt8>::INParam numChannel,
    KL::Traits<KL::UInt32>::INParam position
)
{
    //Fabric::EDK::log("Extension: Enter LarmorSound_getChannelEnergy(UInt8 numChannel, UInt32 position)");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->getChannelEnergy(numChannel, position);

    //Fabric::EDK::log("Extension: Leave LarmorSound_getChannelEnergy(UInt8 numChannel, UInt32 position)");
}

// Boolean LarmorSound.initPlay() = "LarmorSound_initPlay";
FABRIC_EXT_EXPORT KL::Boolean LarmorSound_initPlay(
    KL::Traits<KL::LarmorSound>::INParam this_
)
{
    Fabric::EDK::log("Extension: Enter LarmorSound_initPlay()");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->initPlay();

    //Fabric::EDK::log("Extension: Leave LarmorSound_initPlay()");
}

// Boolean LarmorSound.play(UInt32 startPosition) = "LarmorSound_play_startPosition";
FABRIC_EXT_EXPORT KL::Boolean LarmorSound_play_startPosition(
    KL::Traits<KL::LarmorSound>::INParam this_,
    KL::Traits<KL::UInt32>::INParam startPosition
)
{
    Fabric::EDK::log("Extension: Enter LarmorSound_play_startPosition(UInt32 startPosition)");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->play(startPosition);

    //Fabric::EDK::log("Extension: Leave LarmorSound_play_startPosition(UInt32 startPosition)");
}

// Boolean LarmorSound.play() = "LarmorSound_play";
FABRIC_EXT_EXPORT KL::Boolean LarmorSound_play(
    KL::Traits<KL::LarmorSound>::INParam this_
)
{
    Fabric::EDK::log("Extension: Enter LarmorSound_play()");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->play();

    //Fabric::EDK::log("Extension: Leave LarmorSound_play()");
}

// Boolean LarmorSound.stop() = "LarmorSound_stop";
FABRIC_EXT_EXPORT KL::Boolean LarmorSound_stop(
    KL::Traits<KL::LarmorSound>::INParam this_
)
{
    Fabric::EDK::log("Extension: Enter LarmorSound_stop()");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->stop();

    //Fabric::EDK::log("Extension: Leave LarmorSound_stop()");
}

// Boolean LarmorSound.isInitedPlay() = "LarmorSound_isInitedPlay";
FABRIC_EXT_EXPORT KL::Boolean LarmorSound_isInitedPlay(
    KL::Traits<KL::LarmorSound>::INParam this_
)
{
    //Fabric::EDK::log("Extension: Enter LarmorSound_isInitedPlay()");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->isInitedPlay();

    //Fabric::EDK::log("Extension: Leave LarmorSound_isInitedPlay()");
}

// Boolean LarmorSound.isPlaying() = "LarmorSound_isPlaying";
FABRIC_EXT_EXPORT KL::Boolean LarmorSound_isPlaying(
    KL::Traits<KL::LarmorSound>::INParam this_
)
{
    //Fabric::EDK::log("Extension: Enter LarmorSound_isPlaying()");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->isPlaying();

    //Fabric::EDK::log("Extension: Leave LarmorSound_isPlaying()");
}

// UInt32 LarmorSound.getPlayPosition() = "LarmorSound_getPlayPosition";
FABRIC_EXT_EXPORT KL::UInt32 LarmorSound_getPlayPosition(
    KL::Traits<KL::LarmorSound>::INParam this_
)
{
    //Fabric::EDK::log("Extension: Enter LarmorSound_getPlayPosition()");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->getPlayPosition();

    //Fabric::EDK::log("Extension: Leave LarmorSound_getPlayPosition()");
}

// Boolean LarmorSound.closePlay() = "LarmorSound_closePlay";
FABRIC_EXT_EXPORT KL::Boolean LarmorSound_closePlay(
    KL::Traits<KL::LarmorSound>::INParam this_
)
{
    Fabric::EDK::log("Extension: Enter LarmorSound_closePlay()");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->closePlay();

    //Fabric::EDK::log("Extension: Leave LarmorSound_closePlay()");
}

// void LarmorSound.setHeartbeatActive(Boolean active, UInt64 heartbeatThreshold) = "LarmorSound_setHeartbeatActive";
FABRIC_EXT_EXPORT void LarmorSound_setHeartbeatActive(
    KL::Traits<KL::LarmorSound>::INParam this_,
    KL::Traits<KL::Boolean>::INParam active,
    KL::Traits<KL::UInt64>::INParam heartbeatThreshold
)
{
    Fabric::EDK::log("Extension: Enter LarmorSound_setHeartbeatActive(Boolean active, UInt64 heartbeatThreshold)");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    ls->setHeartbeatActive(active, heartbeatThreshold);

    //Fabric::EDK::log("Extension: Leave LarmorSound_setHeartbeatActive(Boolean active, UInt64 heartbeatThreshold)");
}

// void LarmorSound.setHeartbeatActive(Boolean active) = "LarmorSound_setHeartbeatActiveDefault";
FABRIC_EXT_EXPORT void LarmorSound_setHeartbeatActiveDefault(
    KL::Traits<KL::LarmorSound>::INParam this_,
    KL::Traits<KL::Boolean>::INParam active
)
{
    Fabric::EDK::log("Extension: Enter LarmorSound_setHeartbeatActiveDefault(Boolean active)");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    ls->setHeartbeatActive(active);

    //Fabric::EDK::log("Extension: Leave LarmorSound_setHeartbeatActiveDefault(Boolean active)");
}

// Boolean LarmorSound.isHeartbeatActive() = "LarmorSound_isHeartbeatActive";
FABRIC_EXT_EXPORT KL::Boolean LarmorSound_isHeartbeatActive(
    KL::Traits<KL::LarmorSound>::INParam this_
)
{
    Fabric::EDK::log("Extension: Enter LarmorSound_isHeartbeatActive()");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    return ls->isHeartbeatActive();

    //Fabric::EDK::log("Extension: Leave LarmorSound_isHeartbeatActive()");
}

//void LarmorSound.heartbeat() = "LarmorSound_heartbeat";
FABRIC_EXT_EXPORT void LarmorSound_heartbeat(
    KL::Traits<KL::LarmorSound>::INParam this_
)
{
    //Fabric::EDK::log("Extension: Enter LarmorSound_heartbeat()");

    LarmorSound *ls = static_cast<LarmorSound*>(this_->pointer);
    ls->heartbeat();

    //Fabric::EDK::log("Extension: Leave LarmorSound_heartbeat()");
}
